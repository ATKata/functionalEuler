package autotrader.kata.euler;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
public class Problem2 {
    public static void main(String[] args) {

        // [1,2], [2,3], [3,5], ....
        // (2, 3, 5, .....)
        final int limit = 4000000;
        FibHolders holder = new FibHolders(1,1);
        int sum = Stream.iterate(holder, s -> new FibHolders(s.getB(), s.getA()+s.getB()))
                .limit(40)
                .map(FibHolders::getB)
                .filter(a -> a % 2 == 0)
                .filter(b -> b < limit)
                .reduce(0, (a,b) -> a+b);

        System.out.println(sum);
    }


    private static class FibHolders{
        private int a;
        private int b;

        public FibHolders(int a, int b) {
            this.a = a;
            this.b = b;
        }

        public int getA() {
            return a;
        }

        public void setA(int a) {
            this.a = a;
        }

        public int getB() {
            return b;
        }

        public void setB(int b) {
            this.b = b;
        }
    }

}
